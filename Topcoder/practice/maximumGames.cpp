// Optimise
#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "/home/shahraaz/bin/debug.h"
#else
#define db(...)
#endif

using ll = long long;
#define f first
#define s second
#define pb push_back
#define all(v) v.begin(), v.end()

const int NAX = 2e5 + 5, MOD = 1000000007;

class SoccerStadium
{
public:
    int maximumGames(int H, int W, vector<string> placement)
    {
        H = placement.size();
        if (H == 0)
            return 0;
        W = placement[0].size();
        vector<vector<bool>> done(H, vector<bool>(W));
        int a[] = {0, 0, 1, -1};
        int b[] = {1, -1, 0, 0};
        auto isValid = [&](int x, int y) -> bool {
            return 0 <= x && x < H && 0 <= y && y < W;
        };
        db(H, W);
#ifdef LOCAL
        db("------------");
        for (int i = 0; i < H; i++)
            db(placement[i]);
#endif
        while (true)
        {
            done = vector<vector<bool>>(H, vector<bool>(W));
            bool ok = true;
            int count = 0;
            for (int i = 0; i < H && ok; i++)
                for (int j = 0; j < W && ok; j++)
                {
                    if (placement[i][j] != '.')
                        continue;
                    if (done[i][j])
                        continue;
                    count++;
                    queue<pair<int, int>> Q;
                    Q.push({i, j});
                    done[i][j] = true;
                    int visitedCells = 0;
                    int minRow = i, maxRow = i;
                    int minCol = j, maxCol = j;
                    while (Q.size())
                    {
                        auto top = Q.front();
                        minRow = min(minRow, top.f);
                        maxRow = max(maxRow, top.f);
                        minCol = min(minCol, top.s);
                        maxCol = max(maxCol, top.s);
                        visitedCells++;
                        Q.pop();
                        for (size_t k = 0; k < 4; k++)
                        {
                            int x1 = top.f + a[k];
                            int y1 = top.s + b[k];
                            if (isValid(x1, y1) && placement[x1][y1] == '.' && done[x1][y1] == false)
                            {
                                done[x1][y1] = true;
                                Q.push({x1, y1});
                            }
                        }
                    }
                    db(i, j, minRow, maxRow, minCol, maxCol, visitedCells, (maxRow - minRow + 1) * (maxCol - minCol + 1));
                    if (visitedCells != (maxRow - minRow + 1) * (maxCol - minCol + 1))
                    {
                        ok = false;
                        for (size_t i = minRow; i <= maxRow; i++)
                            for (size_t j = minCol; j <= maxCol; j++)
                            {
                                placement[i][j] = '.';
                            }
                    }
                }
#ifdef LOCAL
            db("------------");
            for (int i = 0; i < H; i++)
                db(placement[i]);
#endif
            if (ok)
                return count;
        }
        return -1;
    }
};

#ifndef LOCAL
//<%:testing-code%>
#endif

#ifdef LOCAL
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector<string> p2, bool hasAnswer, int p3)
{
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << ","
         << "{";
    for (int i = 0; int(p2.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << p2[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    SoccerStadium *obj;
    int answer;
    obj = new SoccerStadium();
    clock_t startTime = clock();
    answer = obj->maximumGames(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p3;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    vector<string> p2;
    int p3;

    {
        // ----- test 0 -----
        p0 = 4;
        p1 = 4;
        string t2[] = {"+-+-+-+-+", "|.|.....|", "+.+-+-+-+", "|.|.|...|", "+-+-+.+.+", "|.|.|...|", "+-+.+.+-+", "|...|...|", "+-+-+-+-+"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 5;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }
    // return 0;
    {
        // ----- test 1 -----
        p0 = 3;
        p1 = 3;
        string t2[] = {"+-+-+-+", "|.....|", "+-+-+.+", "|.|.|.|", "+-+-+-+", "|.|.|.|", "+-+-+-+"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 4;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 3;
        p1 = 3;
        string t2[] = {"+-+-+-+", "|.|...|", "+.+-+.+", "|.|.|.|", "+.+.+-+", "|.|...|", "+-+-+-+"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 2;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 3;
        p1 = 3;
        string t2[] = {"+-+-+-+", "|.....|", "+.+-+.+", "|.|.|.|", "+.+-+.+", "|.....|", "+-+-+-+"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 1;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 3;
        p1 = 4;
        string t2[] = {"+-+-+-+-+", "|.|.|...|", "+-+-+-+-+", "|.......|", "+.+-+-+.+", "|.......|", "+-+-+-+-+"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 4;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = 7;
        p1 = 9;
        string t2[] = {"+-+-+-+-+-+-+-+-+-+", "|.|...|...|...|...|", "+.+-+-+-+-+-+-+-+-+", "|.|.|...|...|...|.|", "+-+.+-+-+-+-+-+-+.+", "|.|.|.|...|...|.|.|", "+.+-+.+-+-+-+-+.+-+", "|.|.|.|.|.|.|.|.|.|", "+-+.+-+.+.+-+.+-+.+", "|.|.|...|...|.|.|.|", "+.+-+-+-+-+-+-+.+-+", "|.|...|...|...|.|.|", "+-+-+-+-+-+-+-+-+.+", "|...|...|...|...|.|", "+-+-+-+-+-+-+-+-+-+"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 25;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
#endif

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!