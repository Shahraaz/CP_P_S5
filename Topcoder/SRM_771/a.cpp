//Optimise
#include <bits/stdc++.h>
using namespace std;

// #define multitest 1
#define Debug
#ifdef Debug
#define db(...) ZZ(#__VA_ARGS__, __VA_ARGS__);
#define pc(...) PC(#__VA_ARGS__, __VA_ARGS__);
template <typename T, typename U>
ostream &operator<<(ostream &out, const pair<T, U> &p)
{
    out << '[' << p.first << ", " << p.second << ']';
    return out;
}
template <typename Arg>
void PC(const char *name, Arg &&arg)
{
    std::cerr << name << " { ";
    for (const auto &v : arg)
        cerr << v << ' ';
    cerr << " }\n";
}
template <typename Arg1>
void ZZ(const char *name, Arg1 &&arg1)
{
    std::cerr << name << " = " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void ZZ(const char *names, Arg1 &&arg1, Args &&... args)
{
    const char *comma = strchr(names + 1, ',');
    std::cerr.write(names, comma - names) << " = " << arg1;
    ZZ(comma, args...);
}
#else
#define db(...)
#define pc(...)
#endif

using ll = long long;
#define f first
#define s second
#define pb push_back
const long long mod = 1000000007;

const int nax = 2e5 + 10;

class AllEven
{
    string number;
    long long cache[20][2][2][1 << 11];

    ll dp(int pos, bool already, bool finite, int mask)
    {
        if (pos == number.size())
            return mask == 0;
        ll &ret = cache[pos][already][mask];
        if (ret >= 0)
            return ret;
        ret = 0;
        if (already)
            for (int i = 0; i < 10; ++i)
                ret += dp(pos + 1, 1, mask ^ (1 << i));
        else
        {
            for (int i = 0; i < (number[pos] - '0'); ++i)
                ret += dp(pos + 1, 1, mask ^ (1 << i));
            ret += dp(pos + 1, 0, mask ^ (1 << (number[pos] - '0')));
        }
        // db(pos, already, mask, ret);
        return ret;
    }

    long long countLessThan(ll num)
    {
        if (num < 10)
            return 0;
        number = to_string(num);
        ll ret = 0;
        memset(cache, -1, sizeof cache);
        for (int i = 0; i < (number[0] - '0'); ++i)
            ret += dp(1, true, 1 << i);
        ret += dp(1, false, 1 << (number[0] - '0'));
        db(ret, num);
        return ret;
    }

public:
    long long countInRange(long long lo, long long hi)
    {
        return countLessThan(hi) - countLessThan(lo - 1);
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, bool hasAnswer, long long p2)
{
    cout << "Test " << testNum << ": [" << p0 << "," << p1;
    cout << "]" << endl;
    AllEven *obj;
    long long answer;
    obj = new AllEven();
    clock_t startTime = clock();
    answer = obj->countInRange(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p2;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    long long p0;
    long long p1;
    long long p2;

    {
        // ----- test 0 -----
        p0 = 47ll;
        p1 = 999ll;
        p2 = 5ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 47ll;
        p1 = 1010ll;
        p2 = 7ll;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 12345678901ll;
        p1 = 98765432109ll;
        p2 = 0ll;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 1234ll;
        p1 = 654321ll;
        p2 = 6862ll;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 0ll;
        p1 = 10ll;
        p2 = 0ll;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING