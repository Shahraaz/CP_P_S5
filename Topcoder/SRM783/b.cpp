//Optimise
#include <bits/stdc++.h>
using namespace std;

#define Debug
#ifdef Debug
#define db(...) ZZ(#__VA_ARGS__, __VA_ARGS__);
#define pc(...) PC(#__VA_ARGS__, __VA_ARGS__);
template <typename T, typename U>
ostream &operator<<(ostream &out, const pair<T, U> &p)
{
	out << '[' << p.first << ", " << p.second << ']';
	return out;
}
template <typename Arg>
void PC(const char *name, Arg &&arg)
{
	std::cerr << name << " { ";
	for (const auto &v : arg)
		cerr << v << ' ';
	cerr << " }\n";
}
template <typename Arg1>
void ZZ(const char *name, Arg1 &&arg1)
{
	std::cerr << name << " = " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void ZZ(const char *names, Arg1 &&arg1, Args &&... args)
{
	const char *comma = strchr(names + 1, ',');
	std::cerr.write(names, comma - names) << " = " << arg1;
	ZZ(comma, args...);
}
#else
#define db(...)
#define pc(...)
#endif

using ll = long long;
#define f first
#define s second
#define pb push_back
const long long mod = 1000000007;

const int nax = 2e5 + 10;

class ABBAReplace
{
public:
	int countSteps(string Sprefix, int N, int seed, int threshold)
	{
		ll state = seed;
		while (Sprefix.size() < N)
		{
			state = (state * 1103515245LL + 12345LL) % (1LL << 31);
			if (state < threshold)
				Sprefix += 'A';
			else
				Sprefix += 'B';
		}
		if (count(Sprefix.begin(), Sprefix.end(), 'A') == N)
			return 0;
		if (count(Sprefix.begin(), Sprefix.end(), 'B') == N)
			return 0;
		int aCnt = 0;
		int totACnt = 0;
		int ret = 0;
		for (size_t i = 0; i < N; i++)
		{
			if (Sprefix[i] == 'B')
			{
				if (aCnt != 0)
				{
					ret = max(ret + 1, aCnt);
				}
			}
			else
			{
				aCnt++;
			}
		}
		return ret;
	}
};

#ifndef LOCAL
//<%:testing-code%>
#endif

#ifdef LOCAL
// int main()
// {
// 	return 0;
// }
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, int p1, int p2, int p3, bool hasAnswer, int p4)
{
	cout << "Test " << testNum << ": ["
		 << "\"" << p0 << "\""
		 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	ABBAReplace *obj;
	int answer;
	obj = new ABBAReplace();
	clock_t startTime = clock();
	answer = obj->countSteps(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer)
	{
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer)
	{
		res = answer == p4;
	}
	if (!res)
	{
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
	{
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer)
	{
		cout << "Match :-)" << endl;
	}
	else
	{
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main()
{
	bool all_right;
	all_right = true;

	string p0;
	int p1;
	int p2;
	int p3;
	int p4;

	{
		// ----- test 0 -----
		p0 = "AABABB";
		p1 = 6;
		p2 = 0;
		p3 = 0;
		p4 = 4;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = "";
		p1 = 0;
		p2 = 4;
		p3 = 7;
		p4 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = "ABBABAABABBBABBBB";
		p1 = 17;
		p2 = 0;
		p3 = 0;
		p4 = 11;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = "AABAA";
		p1 = 17;
		p2 = 47474747;
		p3 = 1000000000;
		p4 = 10;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	if (all_right)
	{
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else
	{
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
#endif

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!