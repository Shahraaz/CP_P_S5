// Optimise
#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "/home/shahraaz/bin/debug.h"
#else
#define db(...)
#endif

using ll = long long;
#define f first
#define s second
#define pb push_back
#define all(v) v.begin(), v.end()

const int NAX = 2e5 + 5, MOD = 1000000007;

class SecondDiameters
{
public:
    long long getSecondDiameters(vector<int> x, vector<int> y)
    {
        int n = x.size();
        ll res = 0;
        auto dist = [&](int i, int j) -> ll {
            return (x[i] - x[j]) * 1LL * (x[i] - x[j]) + (y[i] - y[j]) * 1LL * (y[i] - y[j]);
        };
        set<pair<ll, pair<int, int>>> all_pair_dists;
        vector<ll> dists;
        for (size_t i = 0; i < n; i++)
            for (size_t j = 0; j < n; j++)
            {
                dists.pb(dist(i, j));
                all_pair_dists.insert({dists.back(), {i, j}});
            }
        sort(all(dists));
        dists.erase(unique(all(dists)), dists.end());
        vector<int> cnt(dists.size());
        for (auto &x : all_pair_dists)
        {
            auto one = x.first;
            one = lower_bound(all(dists), one) - dists.begin();
            cnt[one]++;
        }
        db(dists);
        db(all_pair_dists);
        db(cnt);
        for (size_t i = 0; i < n; i++)
        {
            for (size_t j = 0; j < n; j++)
            {
                auto d = dist(i, j);
                d = lower_bound(all(dists), d) - dists.begin();
                cnt[d]--;
                cnt[d]--;
            }
            db(i, cnt);
            int rptr = dists.size() - 1;
            bool ok = false;
            for (rptr; rptr >= 0; rptr--)
                if (cnt[rptr] && ok)
                    break;
                else if (cnt[rptr])
                    ok = true;
            db(rptr, ok);
            assert(ok && rptr != -1);
            res += dists[rptr];
            for (size_t j = 0; j < n; j++)
            {
                auto d = dist(i, j);
                d = lower_bound(all(dists), d) - dists.begin();
                cnt[d]++;
                cnt[d]++;
            }
        }
        return res;
    }
};

// #ifndef LOCAL
// //<%:testing-code%>
// #endif

// #ifdef LOCAL
// int main()
// {
//     ios_base::sync_with_stdio(0);
//     cin.tie(0);
//     int t = 1;
//     // cin >> t;
//     // Solution S;
//     for (int i = 1; i <= t; ++i)
//     {
//         ;
// #ifdef LOCAL
//         cerr << "Case #" << i << ": Time " << chrono::duration<double>(chrono::steady_clock::now() - TimeStart).count() << " s.\n";
//         TimeStart = chrono::steady_clock::now();
// #endif
//     }
//     return 0;
// }
// #endif

// //Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
// bool KawigiEdit_RunTest(int testNum, vector<int> p0, vector<int> p1, bool hasAnswer, long long p2)
// {
//     cout << "Test " << testNum << ": ["
//          << "{";
//     for (int i = 0; int(p0.size()) > i; ++i)
//     {
//         if (i > 0)
//         {
//             cout << ",";
//         }
//         cout << p0[i];
//     }
//     cout << "}"
//          << ","
//          << "{";
//     for (int i = 0; int(p1.size()) > i; ++i)
//     {
//         if (i > 0)
//         {
//             cout << ",";
//         }
//         cout << p1[i];
//     }
//     cout << "}";
//     cout << "]" << endl;
//     SecondDiameters *obj;
//     long long answer;
//     obj = new SecondDiameters();
//     clock_t startTime = clock();
//     answer = obj->getSecondDiameters(p0, p1);
//     clock_t endTime = clock();
//     delete obj;
//     bool res;
//     res = true;
//     cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
//     if (hasAnswer)
//     {
//         cout << "Desired answer:" << endl;
//         cout << "\t" << p2 << endl;
//     }
//     cout << "Your answer:" << endl;
//     cout << "\t" << answer << endl;
//     if (hasAnswer)
//     {
//         res = answer == p2;
//     }
//     if (!res)
//     {
//         cout << "DOESN'T MATCH!!!!" << endl;
//     }
//     else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
//     {
//         cout << "FAIL the timeout" << endl;
//         res = false;
//     }
//     else if (hasAnswer)
//     {
//         cout << "Match :-)" << endl;
//     }
//     else
//     {
//         cout << "OK, but is it right?" << endl;
//     }
//     cout << "" << endl;
//     return res;
// }
// int main()
// {
//     bool all_right;
//     all_right = true;

//     vector<int> p0;
//     vector<int> p1;
//     long long p2;

//     {
//         // ----- test 0 -----
//         int t0[] = {0, 1, 1};
//         p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
//         int t1[] = {0, 0, 1};
//         p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
//         p2 = 0ll;
//         all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
//         // ------------------
//     }

//     {
//         // ----- test 1 -----
//         int t0[] = {0, 0, 1, 1};
//         p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
//         int t1[] = {0, 1, 0, 1};
//         p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
//         p2 = 4ll;
//         all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
//         // ------------------
//     }

//     {
//         // ----- test 2 -----
//         int t0[] = {0, 0, 1, 2, 2};
//         p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
//         int t1[] = {0, 10, 5, 0, 10};
//         p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
//         p2 = 500ll;
//         all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
//         // ------------------
//     }

//     {
//         // ----- test 3 -----
//         int t0[] = {1, 2, 3, 4, 5};
//         p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
//         int t1[] = {1, 3, 6, 10, 15};
//         p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
//         p2 = 534ll;
//         all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
//         // ------------------
//     }

//     if (all_right)
//     {
//         cout << "You're a stud (at least on the example cases)!" << endl;
//     }
//     else
//     {
//         cout << "Some of the test cases had errors." << endl;
//     }
//     return 0;
// }
// // END KAWIGIEDIT TESTING