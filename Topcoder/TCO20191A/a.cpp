//Optimise
#include <bits/stdc++.h>
using namespace std;

// #define Debug
#ifdef Debug
#define db(...) ZZ(#__VA_ARGS__, __VA_ARGS__);
#define pc(...) PC(#__VA_ARGS__, __VA_ARGS__);
template <typename T, typename U>
ostream &operator<<(ostream &out, const pair<T, U> &p)
{
	out << '[' << p.first << ", " << p.second << ']';
	return out;
}
template <typename Arg>
void PC(const char *name, Arg &&arg)
{
	std::cerr << name << " { ";
	for (const auto &v : arg)
		cerr << v << ' ';
	cerr << " }\n";
}
template <typename Arg1>
void ZZ(const char *name, Arg1 &&arg1)
{
	std::cerr << name << " = " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void ZZ(const char *names, Arg1 &&arg1, Args &&... args)
{
	const char *comma = strchr(names + 1, ',');
	std::cerr.write(names, comma - names) << " = " << arg1;
	ZZ(comma, args...);
}
#else
#define db(...)
#define pc(...)
#endif

using ll = long long;
#define f first
#define s second
#define pb push_back
const long long mod = 1000000007;

const int nax = 2e5 + 10;

int dp[11][1024];
class EllysAndXor
{
public:
	int getMax(vector<int> numbers)
	{
		memset(dp, -1, sizeof dp);
		int res = 0;
		function<int(int, int)> solve = [&](int pos, int prev) -> int {
			if (pos == numbers.size())
			{
				res = max(prev, res);
				return prev;
			}
			int &ret = dp[pos][prev];
			if (ret >= 0)
				return ret;
			ret = max(solve(pos + 1, prev ^ numbers[pos]), solve(pos + 1, prev & numbers[pos]));
			db(pos, prev, ret);
			return ret;
		};
		db(solve(1, numbers[0]));
		solve(1,numbers[0]);
		return res;
	}
};

#ifndef LOCAL
//<%:testing-code%>
#endif

#ifdef LOCAL
// int main()
// {
// 	return 0;
// }
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector<int> p0, bool hasAnswer, int p1)
{
	cout << "Test " << testNum << ": ["
		 << "{";
	for (int i = 0; int(p0.size()) > i; ++i)
	{
		if (i > 0)
		{
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	EllysAndXor *obj;
	int answer;
	obj = new EllysAndXor();
	clock_t startTime = clock();
	answer = obj->getMax(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer)
	{
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer)
	{
		res = answer == p1;
	}
	if (!res)
	{
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
	{
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer)
	{
		cout << "Match :-)" << endl;
	}
	else
	{
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main()
{
	bool all_right;
	all_right = true;

	vector<int> p0;
	int p1;

	{
		// ----- test 0 -----
		int t0[] = {42, 27, 38};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 44;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = {666, 133, 438, 123, 893, 674, 462, 209};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 976;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		int t0[] = {42};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 42;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		int t0[] = {123, 456, 789, 987, 654, 321};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 975;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		int t0[] = {42, 13, 17, 666, 811, 314, 1, 5, 2, 1000};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1007;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right)
	{
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else
	{
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
#endif

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!