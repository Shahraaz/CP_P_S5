{"scoring":null,"notes":"","legend":"Jessie has recently started jogging and tracking the progress with a fitness band. There are $n$ spectacular spots on a nearby hill. As running uphill is hard for an amateur jogger, Jessie is only going to run downhill. The spots have numbers from $1$ to $n$, the higher the number is, the lower the spot is. Some pairs of spots are connected by trails, and for our purpose, we will only consider trails $i \\to j$ going from a higher spot to a lower spot ($i < j$).\r\n\r\n\\begin{center}\r\n\\includegraphics[bb=0 0 188 130]{graph.eps}\r\n\\end{center}\r\n\r\nJessie successfully finished some number of jogs, running through each possible sequence of spots, for which a trail between any two consecutive spots exists, exactly once.\r\nNow Jessie is planning to restore the map of all trails with the help of data collected by the fitness band. Unfortunately, the display on the band is small, and can only show the last digit of the number of jogs Jessie did between each pair of spots $i$ and $j$ where $1 \\le i < j \\le n$. Can you help Jessie restore the map of the hill given this data?\r\n\r\n ","authorLogin":"avasilyev","language":"english","timeLimit":2000,"output":"Print $n$ lines, describing the map of the hill in the similar format: the $i$-th line should contain $n$ characters, where $j$-th character is \\t{1} if there is a trail from the $i$-th spot to the $j$-th spot, and \\t{0} otherwise. For every $i \\ge j$, the $j$-th character in the $i$-th row must be \\t{0}.","inputFile":"stdin","outputFile":"stdout","input":"The first line of the input contains an integer $n$~--- the number of spots on the hill  ($2 \\le n \\le 500$).\r\nNext, $n$ lines follow: the $i$-th line contains $n$ characters $a_{i,1}, a_{i,2}, \\ldots, a_{i,n}$. Character $a_{i, j}$ is the last digit of the number of different jogs made by Jessie starting at the $i$-th spot and ending at the $j$-th spot. For every $i \\ge j$, $a_{i, j} = 0$.\r\n\r\nIt is guaranteed that a solution always exists for the given input data.","authorName":"Artem Vasilyev","sampleTests":[{"output":"01100\r\n00011\r\n00001\r\n00001\r\n00000\r\n","input":"5\r\n01113\r\n00012\r\n00001\r\n00001\r\n00000\r\n","inputFile":"example.01","outputFile":"example.01.a"}],"name":"Just the Last Digit","interaction":null,"memoryLimit":536870912,"tutorial":"{\r\n    \\parindent=1cm\r\n    \\begin{tabular}{l@{\\extracolsep{1cm}}l}\r\n         Idea: & Artem Vasilyev\\\\\r\n         Statement: & Artem Vasilyev\\\\\r\n         Checker: & Artem Vasilyev\\\\\r\n         Tests: & Artem Vasilyev\\\\\r\n     \\end{tabular}\r\n}\r\n\r\nThe formal statement is <<given a number of paths between each pair of vertices in a DAG modulo 10, restore the graph itself>>. \r\n\r\nLet's start constructing the graph starting from vertex 1.\r\nIf the number of paths $1 \\leadsto 2$ is zero, there's no edge. Otherwise, there is an edge $1 \\to 2$ (and the number of paths must be $1$, otherwise there is no answer). What happens if we remove this edge? The number of paths $1 \\leadsto i$ is decreased by the number of paths $2 \\leadsto i$. Let's go over all $i$ from $3$ to $n$ and subtract the number of paths $2 \\leadsto i$ from the number of paths $1 \\leadsto i$. Perform all the subtractions modulo $10$.\r\n\r\nSimilarly, consider the number of paths $1 \\leadsto 3$. If it's zero, then there's no edge, if it's one, there is an edge $1 \\to 3$. Again, subtract paths $3 \\leadsto i$ from $1 \\leadsto i$ in case there is an edge. Continue with checking $1 \\leadsto 4$, $1 \\leadsto 5$ and so on. This way, we restored all the edges from the vertex $1$ in $\\mathcal{O}(n^2)$ time. Now we can do the same with all the remaining vertices $2$, $3$, \\ldots, $n$. The total time complexity is $\\mathcal{O}(n^3)$.\r\n\r\n{\r\n    \\parindent=1cm\r\n    \\begin{tabular}{l@{\\extracolsep{1cm}}l}\r\n         Идея задачи: & Артем Васильев\\\\\r\n         Условие: & Артем Васильев\\\\\r\n         Проверяющая программа: & Артем Васильев\\\\\r\n         Тесты: & Артем Васильев\\\\\r\n     \\end{tabular}\r\n}\r\n\r\nМатематическая постановка задачи имеет вид: дано число путей (взятое по модулю 10) между каждой парой вершин в ациклическом направленном графе, требуется востановить граф.\r\n\r\nНачнем восстанавливать граф с вершины 1. Если число путей $1 \\leadsto 2$ равно нулю, то ребра нет, иначе ребро есть, при этом, $1 \\leadsto 2$ должно быть равно единице. Если мы удалим это ребро, то число путей $1 \\leadsto i$ уменьшится на число путей $2 \\leadsto i$. Переберем $i$ от $3$ до $n$ и вычтем число путей $2 \\leadsto i$ из числа путей $1 \\leadsto i$ (все вычисления производятся по модулю 10).\r\n\r\nДалее рассмотрим число путей $1 \\leadsto 3$. Если это ноль, то ребра $1 \\to 3$ нет, а если единица, то ребро есть и мы можем вычесть число путей $3 \\leadsto i$ из $1 \\leadsto i$ для $i$ от $4$ до $n$. Повторим эту процедуру для $1 \\leadsto 4$, $1 \\leadsto 5$ и так далее. Таким образом, мы найдем все ребра из вершины $1$ за $\\mathcal{O}(n^2)$. \r\n\r\nАналогично переберем ребра из вершин $2$, $3$, \\ldots, $n$. Общее время исполения будет $\\mathcal{O}(n^3)$.\r\n"}