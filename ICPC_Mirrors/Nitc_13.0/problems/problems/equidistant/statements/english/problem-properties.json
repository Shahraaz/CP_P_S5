{"scoring":null,"notes":"","legend":"In 2019 ICPC subregions structure was changed a little. Now for each subregion, we need to choose the best place for the subregion finals. To make things fair we want to choose a city in such a way that all teams will spend the same amount of time to get there.\r\n\r\nTo make things simpler we say that all teams will use trains to get to the finals. The railroad system can be represented as a tree where each city is a vertex and some pairs of cities are connected by a railroad. It takes exactly one hour to get from one city to another if they are directly connected. \r\n\r\nYou are given a description of the railroad system and the cities where teams are located. You need to choose any city that has an equal distance to all teams' cities or detect that no such city exists.","authorLogin":"qwerty787788","language":"english","timeLimit":2000,"output":"If it is impossible to choose a city fairly, output a single word ``\\t{NO}''. Otherwise, output a the word ``\\t{YES}'' at the first line. The second line should contain a single integer~--- the city where subregion finals should be held. If there is more than one solution, output any of them.","inputFile":"stdin","outputFile":"stdout","input":"The first line of the input contains two integers $n$ and $m$~--- the number of cities and the number of teams~($1 \\le m \\le n \\le 2 \\cdot 10^5$). Each of the following $n - 1$ lines contains two integers $v_i$ and $u_i$~--- the indices of the cities connected by the $i$-th railroad~($1 \\le v_i, u_i \\le n$). It is guaranteed that for each pair of cities there is exactly one simple path connecting them.\r\n\r\n\r\nThe next line contains $m$ integers $c_1, c_2, \\ldots, c_m$~--- the cities of the teams ($1 \\le c_i \\le n$). All teams are located in different cities.","authorName":"Borys Minaiev","sampleTests":[{"output":"YES\r\n3\r\n","input":"6 3\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n4 6\r\n1 5 6\r\n","inputFile":"example.01","outputFile":"example.01.a"},{"output":"NO\r\n","input":"2 2\r\n1 2\r\n1 2\r\n","inputFile":"example.02","outputFile":"example.02.a"}],"name":"Equidistant","interaction":null,"memoryLimit":536870912,"tutorial":"{\r\n    \\parindent=1cm\r\n    \\begin{tabular}{l@{\\extracolsep{1cm}}l}\r\n         Idea: & Mike Mirzayanov\\\\\r\n         Statement: & Borys Minaiev\\\\\r\n         Checker: & Borys Minaiev\\\\\r\n         Tests: & Borys Minaiev\\\\\r\n     \\end{tabular}\r\n}\r\n\r\nLet's fix one of the cities with a team $r$ and make it a root of the tree. Than find another city with a team $t$ which has the biggest distance to the root. After that we can find a vertex $ans$ which lies on the path between $r$ and $t$ and have the same distance to both of them.\r\n\r\nNow we can proof that $ans$ is correct answer for our task if any answer exist. \r\n\r\nCorrect answer lies inside a subtree of $ans$ (otherwise distance to $r$ will be less than distance to $t$). For all teams not inside subtree of $ans$ relative distance to all vertices inside subtree of $ans$ is the same. So we can choose any vertex in subtree or none of them.\r\n\r\nAll vertices with teams inside subtree $ans$ has height less than or equal to height of $t$. If they all have the same height then $ans$ is correct answer. Otherwise we can't choose correct answer inside subtree of $ans$ because it will have too big distance from $r$.\r\n\r\nSo we just need to check if $ans$ has the same distance to all teams by running one depth first search.\r\n\r\n{\r\n    \\parindent=1cm\r\n    \\begin{tabular}{l@{\\extracolsep{1cm}}l}\r\n         Идея задачи: & Михаил Мирзаянов\\\\\r\n         Условие: & Борис Минаев\\\\\r\n         Проверяющая программа: & Борис Минаев\\\\\r\n         Тесты: & Борис Минаев\\\\\r\n     \\end{tabular}\r\n}\r\n\r\nПодвесим дерево за вершину $c_1$ и найдём самую глубокую команду $c_f$ и соответствующую ей глубину $d$. Пусть $v$~--- вершина на середине пути от $c_1$ до $c_f$. Докажем, что либо она является ответом, либо ответа не существует.\r\n\r\nЗаметим, что ответ должен лежать в поддереве вершины $v$ ($T_v$), так как в противном случае расстояние до $c_1$ будет меньше расстояния до $c_f$. \r\n\r\nДля всех команд не из $T_v$, расстояние до любой вершины из $T_v$ одинаковы. Таким образом, либо любая вершина из $T_v$ будет ответом для таких команд, либо ответа не существует.\r\n\r\nС другой стороны, все команды из $T_v$ имеют глубину не большую $d$, иначе $c_f$ была бы не самой глубокой вершиной. Если все они имеют глубину ровно $d$, то $v$ является ответом для команд из $T_v$. В противном случае, для этих команд решение не существует.\r\n\r\nТаким образом, всё что нам требуется~--- проверить, что вершина $v$ является ответом. Сделаем это, переподвесив дерево за неё и проверив, что глубины всех команд равны $d$.\r\n\r\nТаким образом, задача решается за два обхода в глубину, а общее время работы составляет $O(n)$."}