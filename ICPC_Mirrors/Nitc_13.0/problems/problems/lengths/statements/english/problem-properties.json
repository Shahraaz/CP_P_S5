{"scoring":null,"notes":"","legend":"In mathematics and computer science, the critical exponent of a string describes the largest number of times its contiguous substring is repeated in a row. The trick is that it can be a fraction. For example, the critical exponent of ``Mississippi'' is $7/3$, as it contains the substring ``ississi'', which is of length 7 and period 3.\r\n\r\nThe formal definition is as follows. Let $w$ and $x$ be non-empty strings. $x$ is said to occur in $w$ with exponent $\\alpha$, for positive rational $\\alpha$, if there is a substring $y$ in $w$ such as $y = x^nx_0$ where $x^n$ is $x$ repeated $n$ times, $x_0$ is a prefix of $x$, $n$ is the integer part of $\\alpha$, and the length $|y|$ is equal to $\\alpha |x|$. The critical exponent of $w$ is the maximum $\\alpha$ over all $x^\\alpha$ that occur in $w$.\r\n\r\nGiven a string $w$, find its critical exponent.","authorLogin":"ayoyia","language":"english","timeLimit":2000,"output":"Output the critical exponent of $w$ as an irreducible fraction $p/q$ where $p$ and $q$ are integers without leading zeroes.","inputFile":"stdin","outputFile":"stdout","input":"The only line contains a string $w$~--- a sequence of lowercase English letters ($1 \\le |w| \\le 200\\,000$).","authorName":"Anton Garder","sampleTests":[{"output":"7/3\r\n","input":"mississippi\r\n","inputFile":"example.01","outputFile":"example.01.a"},{"output":"2/1\r\n","input":"abab\r\n","inputFile":"example.02","outputFile":"example.02.a"}],"name":"Lengths and Periods","interaction":null,"memoryLimit":536870912,"tutorial":"{\r\n    \\parindent=1cm\r\n    \\begin{tabular}{l@{\\extracolsep{1cm}}l}\r\n         Idea: & Anton Garder\\\\\r\n         Statement: & Anton Garder\\\\\r\n         Checker: & Anton Garder\\\\\r\n         Tests: & Anton Garder\\\\\r\n     \\end{tabular}\r\n}\r\n\r\nWe have to find a substring such that its length divided by its shortest period is greatest possible. Let us call such substring \\textit{optimal}.\r\n\r\nIf the answer is not equal to $1/1$ that means that $w$ has a substring with a period not equal to its length. Consider a substring $w[i:j)$, let its shortest period be $p$, then $LCP(i, j - p) \\ge p$. Here $LCP(a, b)$ is the longest common prefix of $w[a:n)$ and $w[b:n)$. Note that if $LCP(i, j - p) > p$, that means that the shortest period of $w[i:j + 1)$ is also at least $p$, but its length is greater. Therefore $w[i:j)$ is not optimal.\r\n\r\nNow we are only interested in substring of the form $w[i:j+LCP(i, j))$. Each of those can be used to relax the answer with the value $(j - i + LCP(i, j) / (j - i)$, which is equal to $1 + LCP(i, j) / (j - i)$. Therefore among all pairs $i < j$ with equal value of $LCP(i, j)$ the one with minimum $j - i$ is optimal. \r\n\r\nLet us build a suffix tree for the string $w + \\t{\\char 35}$. Let $len(v)$ be the length of the path from the root to $v$. LCP of any two suffixes passing through $v$ is at least $len(v)$. We have to find two closest by their starting indices among them. If the difference between their starting indices is $d$, we relax the answer by the value of $1 + len(v)/d$.\r\n\r\nFor each vertex $v$ we create \\texttt{std:set} that contains starting indices of all suffixes that pass through $v$. We use the idea of joining the smaller set to the larger one. Let us recursively create sets for $v$'s children, relax the answer with their values, and then unite the children's sets. When we add a suffix to the set, we first check its lower and upper bound in the set, and relax the value of the minimal distance between the two starting indices. When all the sets are united, we relax the value of the answer.\r\n\r\n{\r\n    \\parindent=1cm\r\n    \\begin{tabular}{l@{\\extracolsep{1cm}}l}\r\n         Идея задачи: & Антон Гардер\\\\\r\n         Условие: & Антон Гардер\\\\\r\n         Проверяющая программа: & Антон Гардер\\\\\r\n         Тесты: & Антон Гардер\\\\\r\n     \\end{tabular}\r\n}\r\n\r\nВ задаче требовалость найти подстроку, у которой длина, делённая на минимальный период, максимальна. Назовём такую подстроку оптимальной.\r\n\r\nЕсли ответ не равен 1/1, то у $w$ есть подстрока с периодом, не равным её длине. Рассмотрим $w[i..j)$, пусть её наименьший период $p$, тогда $LCP(i, j - p) \\ge p$, так как наибольший общий префикс у $s[i..)$ и $s[j - p..n)$ не меньше $p$. Заметим, что если $LCP(i, j - p) > p$, то наименьший период строки $w[i..j + 1)$ также не больше $p$, в то время как её длина больше длины $w[i..j)$, то есть $w[i..j)$ не может быть оптимальной подстрокой.\r\n\r\nТеперь нас интересуют только подстроки вида $w[i : j + LCP(i,j))$. Каждая из них обновляет нам ответ значением $j - i + LCP(i, j) / (j - i)$, что равно $1 + LCP(i, j) / (j - i)$. Таким образом, из всех пар $i < j$ с равными $LCP(i, j)$ оптимальной является та, для которой $j - i$ минимально.\r\n\r\nПостроим суффиксное дерево на строке $(w + \\t{\\char 35})$. Пусть $len(v)$~-- длина пути от корня до $v$. LCP любых двух суффиксов, проходящих через $v$ не меньше $len(v)$. \r\nТребуется найти среди этих суффиксов два самых близких~--- таких, у которых разница начальных позиций ($d$) минимальна, и попробовать обновить ответ значением $1 + len(v) / d$.\r\n\r\nДля этого построим для каждой вершины $v$ упорядоченное множество $S_v$, содержащее начальные позиции всех суффиксов, проходящих через $v$. Для этого рекурсивно построим такие множества для детей $v$, обновим для них ответ, а затем сольём их. Во время слияния, когда добавляем начало суффикса в множество $S_v$, найдём его ближайших соседей и обновим наименьшую разницу позиций. После слияния всех множеств обновим ответ. Для того, чтобы слияние работало быстро, будем всегда сливать меньшее к большему.\r\n\r\nТаким образом, общее время работы алгоритма будет $O(|w| \\log^2 |w|)$."}